Name=Migrate Skeletal Implementation To Interface
CategoryName="Interface Method Migration Changes"
CategoryDescription="Changes to migrate methods to interfaces"
MethodsNotSpecified=No methods to refactor.
CheckingPreconditions=Checking preconditions...
CompilingSource=Compiling source ...
CreatingChange=Creating change...
CUContainsCompileErrors=Member ''{0}'' has a compilation unit ''{1}'' that contains compilation errors.
MethodDoesNotExist=Method ''{0}'' does not exist.
PreconditionFailed=No methods have passed precondition checking.
RefactoringNotPossible=Method ''{0}'' has been deemed not to be a skeletal implementation and therefore in its current state cannot be refactored by this plugin.
WrongType=Internal error: node ''{0}'' must be of a simple name type, instead its type was ''{1}''
CantChangeMethod=Need access to source code of method ''{0}''.
NoConstructors=Constructors are invalid for this refactoring.
NoAnnotations=At this time, annotated methods are not supported by this refactoring.
NoStaticMethods=Method ''{0}'' is static. Static methods are not skeletal implementors.
NoAbstractMethods=Method ''{0}'' is abstract. Abstract methods don't have definitions to migrate.
NoFinalMethods=Method ''{0}'' is final. Final methods are not allowed in interfaces.
NoSynchronizedMethods=Method ''{0}'' is synchronized. Synchronized methods aren't allowed in interfaces, even if they are default.
NoMethodsInInterfaces=Method ''{0}'' is already in interface ''{1}''.
MethodsOnlyInClasses=Method ''{0}'' is in type ''{1}'' that is not a class.
NoMethodsInAnnotatedTypes=Method ''{0}'' is in annotated type ''{1}''.
NoMethodsInAnnotationTypes=Method ''{0}'' is declared in annotation type ''{1}''.
NoMethodsInTypesWithFields=Method ''{0}'' is in type ''{1}'' that contains fields.
NoMethodsInTypesWithInitializers=Method ''{0}'' is in type ''{1}'' that contains an initializer.
NoMethodsInTypesWithMoreThanOneMethod=Method ''{0}'' is in type ''{1}'' that contains more than one method.
NoMethodsInTypesWithTypeParameters=Method ''{0}'' is in type ''{1}'' that contains type parameters.
NoMethodsInTypesWithType=Method ''{0}'' is type ''{1}'' that contains types.
NoMethodsInTypesWithSuperType=Method ''{0}'' is in type ''{1}'' that has a super type.
NoMethodsInTypesThatDontImplementInterfaces=Method ''{0}'' is in type ''{1}'' that does not implement an interface.
NoMethodsInAnonymousTypes=''{0}'' is in anonymous type ''{1}''.
NoMethodsInEnums=Method ''{0}'' is declared in an enum type {1}.
NoMethodsInLambdas=''{0}'' is in lambda type ''{1}''.
NoMethodsInLocals=''{0}'' is in local type ''{1}''.
NoMethodsInMemberTypes=''{0}'' is in member type ''{1}''.
NoLambdaMethods=Method ''{0}'' is a lambda method. Migrating its definition to an interface would invalidate the interface's status as a functional interface.
NoMethodsInTypesThatExtendMultipleInterfaces=Method ''{0}'' is in type ''{1}'' that implements multiple interfaces.
NoMethodsThatThrowExceptions=Method ''{0}'' throws an exception.
NoMethodsInConcreteTypes=Method ''{0}'' is declared in the concrete type ''{1}''.
NoMethodsInStaticTypes=Method ''{0}'' is in static type ''{1}''.
NoMethodsWithParameters=Method ''{0}'' has parameters.
NoMethodsWithReturnTypes=Method ''{0}'' has a return type.
NoMethodsWithTypeParameters=Method ''{0}'' has type parameters.
NoMethodsWithStatements=Method ''{0}'' has statements.
NoMethodsInBinaryTypes=Method ''{0}'' is in binary type ''{1}''.
NoMethodsInReadOnlyTypes=Method ''{0}'' is in read-only type ''{1}''.
NoMethodsInTypesWithNoCandidateTargetTypes=Method ''{0}'' is in type ''{1}'' that does not have super interfaces to which methods could be migrated.
NoMethodsInTypesWithMultipleCandidateTargetTypes=Method ''{0}'' is in type ''{1}'' that has multiple super interfaces to which methods could be migrated.
NoNativeMethods=Method ''{0}'' is native.
NoMoreThanOneMethod=Can't migrate more than one method at a time.
IncompatibleLanguageConstruct=Moving ''{0}'', which contains lambdas, to destination type ''{1}'' will result in compile errors, since the destination is not J2SE 1.8 compatible.
DestinationTypeMustBePureInterface=''{0}'' must be a pure interface.
DestinationInterfaceMustOnlyDeclareTheMethodToMigrate=''{0}'' must only declare the method that will be migrated.
NoDestinationInterface=No destination interface exists for source method ''{0}''.
TargetMethodIsAlreadyDefault=Method ''{0}'' is already a default method.
DestinationInterfaceHasAnnotations=''{0}'' is annotated.
DestinationInterfaceIsNotTopLevel=''{0}'' is not a top-level interface.
DestinationInterfaceDeclaresFields=''{0}'' declares fields.
DestinationInterfaceExtendsInterface=''{0}'' extends interface.
DestinationInterfaceDeclaresTypeParameters=''{0}'' declares type parameters.
DestinationInterfaceDeclaresMemberTypes=''{0}'' declares member types.
DestinationInterfaceDoesNotExist=Destination interface ''{0}'' does not exist.
DestinationInterfaceNotWritable=Need access to source code of destination interface ''{0}''.
DestinationInterfaceIsMember=''{0}'' is a member interface.
DestinationInterfaceIsStrictFP=Interface ''{0}'' is FP-strict but not all methods to migrate are FP-strict. 
DestinationInterfaceHierarchyContainsInvalidClass=Destination interface ''{0}'''s hierarchy contains an invalid class.
DestinationInterfaceHierarchyContainsInvalidInterfaces=Destination interface ''{0}'''s hierarchy contains an invalid interface.
DestinationInterfaceHierarchyContainsSubtype=Destination interface ''{0}'''s hierarchy contains a subtype.
DestinationInterfaceHierarchyContainsSuperInterface=Destination interface ''{0}'''s hierarchy contains a super interface.
DestinationInterfaceHierarchyContainsSupertype=Destination interface ''{0}'''s hierarchy contains a super type.
DestinationInterfaceHasExtendingInterface=Destination interface ''{0}'' has extending interfaces.
DestinationInterfaceHasInvalidImplementingClass=Destination interface ''{0}'' has an invalid implementing class.
DeclaringTypeHierarchyContainsInvalidClass=Declaring type ''{0}'''s hierarchy contains an invalid class.
DeclaringTypeHierarchyContainsInvalidInterface=Declaring type ''{0}'''s hierarchy contains an invalid interface.
DeclaringTypeContainsInvalidSupertype=Declaring type ''{0}''' has an invalid super type.
DestinationInterfaceIsFunctional=Destination interface ''{0}'' is functional.
MethodContainsInconsistentParameterAnnotations=Method ''{0}'' has inconsistent parameter annotations with its target method ''{1}''.
ExceptionTypeMismatch=Thrown exceptions differ between source method ''{0}'' and target method ''{1}''.
AnnotationMismatch=Annotations differ between source method ''{0}'' and target method ''{1}''.
AnnotationNameMismatch=Annotations names differ between source and targets.
AnnotationValueMismatch=Annotations value differ between source annotation ''{0}'' and target annotation ''{1}''.
NoMethodsHavePassedThePreconditions=No methods have passed the preconditions.
NoMethodsToMigrate="No methods to migrate."
SourceMethodHasNoTargetMethod=Method ''{0}'' has no target method.
SourceMethodAccessesInstanceField=Method ''{0}'' accesses instance field ''{1}''.
DestinationProjectIncompatible=Source method ''{0}'' has a target method ''{1}'' that is in a project what is not complaint with Java 8. 
SourceMethodImplementsMultipleMethods=Source method ''{0}'' implements multiple methods. Migrating it would result in a compilation error as either a conflict would be caused or multiple methods would be inherited.
DeclaringTypeContainsSubtype=Declaring type ''{0}'' contains subtypes.
SourceMethodOverridesMethod=Source method ''{0}'' overrides a method, which would result in a "class wins" rule, possibly altering virtual method dispatch semantics.
MethodCannotBeAccessed=Source method ''{0}'' accesses method ''{1}'' that cannot be accessed from ''{2}''.
TargetMethodHasMultipleSourceMethods=Method ''{0}'' has a target method ''{1}'' with multiple source methods.
MethodContainsCallToProtectedObjectMethod=Method ''{0}'' contains a call to protected java.lang.Object method ''{1}''.
MethodContainsSuperReference=Method ''{0}'' contains a reference to super, which isn't allowed in interfaces.
MethodContainsTypeIncompatibleThisReference=Method ''{0}'' contains a reference to this that is not type compatible with the migration.